#!/usr/bin/env python
import os
import sys
import re
from os.path import exists, dirname, join
from setuptools import setup, find_packages
import setuptools_scm

# --- 强制解决路径问题 ---
def ensure_version_file():
    """确保 _version.py 目录存在"""
    version_dir = os.path.join("src", "python", "pyxccd")
    os.makedirs(version_dir, exist_ok=True)
    version_file = os.path.join(version_dir, "_version.py")
    if not exists(version_file):
        with open(version_file, "w") as f:
            f.write("# Generated by setup.py\n__version__ = '0.1.0'")
    return version_file

# --- 动态版本控制 ---
def get_version():
    """处理浅克隆导致的 setuptools_scm 失败"""
    try:
        # 尝试从 Git 获取版本
        return setuptools_scm.get_version(
            relative_to=__file__,
            version_file=ensure_version_file(),
            local_scheme="no-local-version",
            fallback_version="0.1.0"  # 明确指定备用版本
        )
    except Exception as e:
        print(f"Warning: setuptools_scm failed, using fallback version: {e}")
        return "0.1.0"

# --- 构建模式选择 ---
def select_build_backend():
    """根据环境选择构建后端（setuptools 或 scikit-build）"""
    if exists("CMakeLists.txt") and not os.getenv("DISABLE_C_EXTENSIONS", "").lower() in {"true", "on", "yes", "1"}:
        try:
            from skbuild import setup as skb_setup
            return skb_setup
        except ImportError:
            print("Warning: scikit-build not found, falling back to setuptools")
    from setuptools import setup
    return setup

# --- 依赖解析 ---
def parse_requirements(fname="requirements/runtime.txt", versions="loose"):
    """解析依赖文件（保持你的原有逻辑）"""
    # ... [你的原有 parse_requirements 实现] ...
    return requirements

# --- 主配置 ---
if __name__ == "__main__":
    setup = select_build_backend()
    version_file = ensure_version_file()

    setup(
        name="pyxccd",
        version=get_version(),
        description="A PYthon library for basic and eXtended COntinuous Change Detection algorithms",
        long_description=open("README.rst").read() if exists("README.rst") else "",
        author="Su Ye",
        author_email="remotesensingsuy@gmail.com",
        url="https://github.com/Remote-Sensing-of-Land-Resource-Lab/pyxccd",
        
        # 包结构
        package_dir={"": "src/python"},
        packages=find_packages(where="src/python"),
        
        # 依赖
        install_requires=parse_requirements("requirements/runtime.txt"),
        extras_require={
            "all": parse_requirements("requirements.txt"),
            "tests": parse_requirements("requirements/tests.txt"),
            # ... [你的其他 extras_require] ...
        },
        
        # C++ 扩展配置
        cmake_args=[
            "-DGSL_ROOT_DIR=/usr" if sys.platform.startswith("linux") else 
            f"-DGSL_ROOT_DIR={os.getenv('GSL_PREFIX', '/usr/local')}"
        ],
        
        # 非代码文件
        include_package_data=True,
        package_data={
            "pyxccd": ["*.yaml"],
            "pyxccd.imagetool": ["*.yaml", "*.tif"],
        },
        
        # 其他元数据
        python_requires=">=3.8",
        classifiers=[
            "Programming Language :: Python :: 3.8",
            # ... [你的其他 classifiers] ...
        ],
    )